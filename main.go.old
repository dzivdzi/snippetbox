package main

import (
	"fmt"
	"log"
	"net/http"
	"strconv"
)

// handler for home - handlers are controllers for executing app logic and write an http response header and bodies
/*
Note: The home handler function is just a regular Go function
with two parameters. The http.ResponseWriter parameter
provides methods for assembling a HTTP response and
sending it to the user, and the *http.Request parameter is a
pointer to a struct which holds information about the current
request (like the HTTP method and the URL being requested).
*/
func home(w http.ResponseWriter, r *http.Request) {
	// Check if the current request URL path EXACTLY matches "/".
	// If no, send a 404 response to the client
	// Note that if we don't execute the return, the handler will keep
	// writing the "/" logic
	if r.URL.Path != "/" {
		http.NotFound(w, r)
		return
	}
	w.Write([]byte("Hey from snippetbox"))
}

func snippetView(w http.ResponseWriter, r *http.Request) {
	// Extract the value of the id parameter from the query string and try to
	// convert it to an integer using the strconv.Atoi() function. If it can't
	// be converted to an integer, or the value is less than 1, we return a
	// 404 page not found response.
	id, err := strconv.Atoi(r.URL.Query().Get("id"))
	if err != nil || id < 1 {
		http.NotFound(w, r)
		return
	}
	fmt.Fprint(w, "Display a specific snippet with ID %d...", id)
}

func snippetCreate(w http.ResponseWriter, r *http.Request) {
	// Use r.Method to check if the request is using POST or not (r is the var name defined for the Request type in the function)
	if r.Method != http.MethodPost {
		// If it's not, use the w.WriteHeader() method to send a 405 status code
		// We then return from the function so tht the subsequent code is not executed
		// HEADER.SET is used to notify the user which method is allowed
		w.Header().Set("Allow", http.MethodPost)

		// w.WriteHeader(http.StatusMethodNotAllowed)
		// w.Write([]byte("Method not allowed!\n"))

		// We can use the http.Error shortcut as a replacement for the 2 methods above - lightweight and shortens code
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}
	w.Write([]byte("This will be used to create a snippet"))
}

func main() {
	// Router (servemux)- maps the path from URL (example.com/routerName) to our handler which executes the logic
	// Serve mux treats the URL pattern "/" like a catch-all. At the moment ALL http requests to our server will be handled by the
	// "home" function above regardless of their URL path
	mux := http.NewServeMux()
	mux.HandleFunc("/", home)
	mux.HandleFunc("/snippet/view", snippetView)
	mux.HandleFunc("/snippet/create", snippetCreate)

	// Web server - GO has a builtIn server so you don't need an external one like apache or nginx
	log.Print("Starting server on :4000")
	// We use the http.ListenAndServe() function to start a new web server. We pass in
	// two parameters: the TCP network address to listen on (in this case ":4000")
	// and the servemux we just created. If http.ListenAndServe() returns an error
	// we use the log.Fatal() function to log the error message and exit. Note
	// that any error returned by http.ListenAndServe() is always non-nil.
	// The TCP network address that we pass in ListenAndServe() should be in the format of
	// "host:port". If we omit the host like in this case, than the server listens on every
	// available network interface
	err := http.ListenAndServe(":4000", mux)
	log.Fatal(err)
}
